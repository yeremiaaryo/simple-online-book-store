// Code generated by MockGen. DO NOT EDIT.
// Source: users_handler.go

// Package users is a generated GoMock package.
package users

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	users "github.com/yeremiaaryo/gotu-assignment/internal/model/users"
)

// MockusersUsecase is a mock of usersUsecase interface.
type MockusersUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockusersUsecaseMockRecorder
}

// MockusersUsecaseMockRecorder is the mock recorder for MockusersUsecase.
type MockusersUsecaseMockRecorder struct {
	mock *MockusersUsecase
}

// NewMockusersUsecase creates a new mock instance.
func NewMockusersUsecase(ctrl *gomock.Controller) *MockusersUsecase {
	mock := &MockusersUsecase{ctrl: ctrl}
	mock.recorder = &MockusersUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersUsecase) EXPECT() *MockusersUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockusersUsecase) CreateUser(ctx context.Context, req users.CreateUserRequest) (*users.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*users.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockusersUsecaseMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockusersUsecase)(nil).CreateUser), ctx, req)
}

// Login mocks base method.
func (m *MockusersUsecase) Login(ctx context.Context, req users.LoginRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockusersUsecaseMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockusersUsecase)(nil).Login), ctx, req)
}
