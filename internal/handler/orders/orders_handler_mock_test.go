// Code generated by MockGen. DO NOT EDIT.
// Source: orders_handler.go

// Package orders is a generated GoMock package.
package orders

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	orders "github.com/yeremiaaryo/gotu-assignment/internal/model/orders"
)

// MockordersUsecase is a mock of ordersUsecase interface.
type MockordersUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockordersUsecaseMockRecorder
}

// MockordersUsecaseMockRecorder is the mock recorder for MockordersUsecase.
type MockordersUsecaseMockRecorder struct {
	mock *MockordersUsecase
}

// NewMockordersUsecase creates a new mock instance.
func NewMockordersUsecase(ctrl *gomock.Controller) *MockordersUsecase {
	mock := &MockordersUsecase{ctrl: ctrl}
	mock.recorder = &MockordersUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockordersUsecase) EXPECT() *MockordersUsecaseMockRecorder {
	return m.recorder
}

// InsertOrder mocks base method.
func (m *MockordersUsecase) InsertOrder(ctx context.Context, order orders.CreateOrderRequest) (*orders.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", ctx, order)
	ret0, _ := ret[0].(*orders.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockordersUsecaseMockRecorder) InsertOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockordersUsecase)(nil).InsertOrder), ctx, order)
}
