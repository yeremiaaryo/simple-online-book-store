// Code generated by MockGen. DO NOT EDIT.
// Source: books_repository.go

// Package books is a generated GoMock package.
package books

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockredis is a mock of redis interface.
type Mockredis struct {
	ctrl     *gomock.Controller
	recorder *MockredisMockRecorder
}

// MockredisMockRecorder is the mock recorder for Mockredis.
type MockredisMockRecorder struct {
	mock *Mockredis
}

// NewMockredis creates a new mock instance.
func NewMockredis(ctrl *gomock.Controller) *Mockredis {
	mock := &Mockredis{ctrl: ctrl}
	mock.recorder = &MockredisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockredis) EXPECT() *MockredisMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *Mockredis) Get(key string, field ...interface{}) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range field {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockredisMockRecorder) Get(key interface{}, field ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, field...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockredis)(nil).Get), varargs...)
}

// Set mocks base method.
func (m *Mockredis) Set(key, value string, ttl int64, field ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key, value, ttl}
	for _, a := range field {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockredisMockRecorder) Set(key, value, ttl interface{}, field ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key, value, ttl}, field...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockredis)(nil).Set), varargs...)
}
