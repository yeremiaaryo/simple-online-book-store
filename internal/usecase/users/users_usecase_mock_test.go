// Code generated by MockGen. DO NOT EDIT.
// Source: users_usecase.go

// Package users is a generated GoMock package.
package users

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	users "github.com/yeremiaaryo/gotu-assignment/internal/model/users"
)

// MockusersRepository is a mock of usersRepository interface.
type MockusersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockusersRepositoryMockRecorder
}

// MockusersRepositoryMockRecorder is the mock recorder for MockusersRepository.
type MockusersRepositoryMockRecorder struct {
	mock *MockusersRepository
}

// NewMockusersRepository creates a new mock instance.
func NewMockusersRepository(ctrl *gomock.Controller) *MockusersRepository {
	mock := &MockusersRepository{ctrl: ctrl}
	mock.recorder = &MockusersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersRepository) EXPECT() *MockusersRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockusersRepository) GetUser(ctx context.Context, email string) (*users.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(*users.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockusersRepositoryMockRecorder) GetUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockusersRepository)(nil).GetUser), ctx, email)
}

// InsertUser mocks base method.
func (m *MockusersRepository) InsertUser(ctx context.Context, model users.Model) (*users.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, model)
	ret0, _ := ret[0].(*users.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockusersRepositoryMockRecorder) InsertUser(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockusersRepository)(nil).InsertUser), ctx, model)
}
