// Code generated by MockGen. DO NOT EDIT.
// Source: orders_usecase.go

// Package orders is a generated GoMock package.
package orders

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	books "github.com/yeremiaaryo/gotu-assignment/internal/model/books"
	orders "github.com/yeremiaaryo/gotu-assignment/internal/model/orders"
)

// MockordersRepository is a mock of ordersRepository interface.
type MockordersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockordersRepositoryMockRecorder
}

// MockordersRepositoryMockRecorder is the mock recorder for MockordersRepository.
type MockordersRepositoryMockRecorder struct {
	mock *MockordersRepository
}

// NewMockordersRepository creates a new mock instance.
func NewMockordersRepository(ctrl *gomock.Controller) *MockordersRepository {
	mock := &MockordersRepository{ctrl: ctrl}
	mock.recorder = &MockordersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockordersRepository) EXPECT() *MockordersRepositoryMockRecorder {
	return m.recorder
}

// GetOrdersByUserID mocks base method.
func (m *MockordersRepository) GetOrdersByUserID(ctx context.Context, userID int64, limit, offset int) ([]orders.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]orders.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockordersRepositoryMockRecorder) GetOrdersByUserID(ctx, userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockordersRepository)(nil).GetOrdersByUserID), ctx, userID, limit, offset)
}

// InsertOrder mocks base method.
func (m *MockordersRepository) InsertOrder(ctx context.Context, order orders.CreateOrderRequest) (*orders.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", ctx, order)
	ret0, _ := ret[0].(*orders.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockordersRepositoryMockRecorder) InsertOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockordersRepository)(nil).InsertOrder), ctx, order)
}

// MockbooksRepository is a mock of booksRepository interface.
type MockbooksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockbooksRepositoryMockRecorder
}

// MockbooksRepositoryMockRecorder is the mock recorder for MockbooksRepository.
type MockbooksRepositoryMockRecorder struct {
	mock *MockbooksRepository
}

// NewMockbooksRepository creates a new mock instance.
func NewMockbooksRepository(ctrl *gomock.Controller) *MockbooksRepository {
	mock := &MockbooksRepository{ctrl: ctrl}
	mock.recorder = &MockbooksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbooksRepository) EXPECT() *MockbooksRepositoryMockRecorder {
	return m.recorder
}

// GetBookByIDs mocks base method.
func (m *MockbooksRepository) GetBookByIDs(ctx context.Context, ids []int64) (map[int64]books.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByIDs", ctx, ids)
	ret0, _ := ret[0].(map[int64]books.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByIDs indicates an expected call of GetBookByIDs.
func (mr *MockbooksRepositoryMockRecorder) GetBookByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByIDs", reflect.TypeOf((*MockbooksRepository)(nil).GetBookByIDs), ctx, ids)
}
