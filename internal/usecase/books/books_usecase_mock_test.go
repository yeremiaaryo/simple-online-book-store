// Code generated by MockGen. DO NOT EDIT.
// Source: books_usecase.go

// Package books is a generated GoMock package.
package books

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	books "github.com/yeremiaaryo/gotu-assignment/internal/model/books"
)

// MockbooksRepository is a mock of booksRepository interface.
type MockbooksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockbooksRepositoryMockRecorder
}

// MockbooksRepositoryMockRecorder is the mock recorder for MockbooksRepository.
type MockbooksRepositoryMockRecorder struct {
	mock *MockbooksRepository
}

// NewMockbooksRepository creates a new mock instance.
func NewMockbooksRepository(ctrl *gomock.Controller) *MockbooksRepository {
	mock := &MockbooksRepository{ctrl: ctrl}
	mock.recorder = &MockbooksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbooksRepository) EXPECT() *MockbooksRepositoryMockRecorder {
	return m.recorder
}

// GetBooks mocks base method.
func (m *MockbooksRepository) GetBooks(ctx context.Context, search string, limit, offset int) ([]books.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx, search, limit, offset)
	ret0, _ := ret[0].([]books.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockbooksRepositoryMockRecorder) GetBooks(ctx, search, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockbooksRepository)(nil).GetBooks), ctx, search, limit, offset)
}
